apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "release.fullname" . }}-install
  labels:
  {{- include "release.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: install
        command:
          - sh
          - -c
          - -e
          - -u
          - |
              if [ ! -e "$SYMMETRIC_ENCRYPTION_CONFIG" ]; then
                bundle exec symmetric-encryption --generate --key-path /config/symmetric-encryption
              fi

              if [ ! -e "$RAILS_CREDENTIALS_CONTENT_PATH" ]; then
                bundle exec rails self_managed:generate_credentials
              fi

              if [ ! -e /config/release-db-initialized ]; then
                bundle exec rails db:create db:schema:load db:migrate self_managed:install
                touch /config/release-db-initialized
              fi

              bundle exec rails db:migrate
        envFrom:
        - configMapRef:
            name: {{ include "release.fullname" . }}-common-configmap
        - secretRef:
            name: {{ include "release.fullname" . }}-common-secret
        - configMapRef:
            name: {{ include "release.fullname" . }}-backend-configmap
        - secretRef:
            name: {{ include "release.fullname" . }}-backend-secret
        image: {{ .Values.containerRegistry.host}}/release/spacedust/backend:{{ .Values.tag }}
        imagePullPolicy: Always
        volumeMounts:
        - name: config
          mountPath: /config
      - name: temporal-setup
        command:
          - sh
          - -c
          - -e
          - -u
          - |
              if [ ! -e /config/temporal-db-initialized ]; then
                temporal-sql-tool create-database
                temporal-sql-tool setup-schema -v 0.0
                SQL_DATABASE=temporal_visibility temporal-sql-tool create-database
                SQL_DATABASE=temporal_visibility temporal-sql-tool setup-schema -v 0.0
                touch /config/temporal-db-initialized
              fi

              temporal-sql-tool update-schema --schema-dir /etc/temporal/schema/postgresql/v96/temporal/versioned/
              SQL_DATABASE=temporal_visibility temporal-sql-tool update-schema --schema-dir /etc/temporal/schema/postgresql/v96/visibility/versioned/

              if [ ! -e /config/temporal-namespace-registered ]; then
                tctl --ns "$TEMPORAL_NAMESPACE" namespace register
                touch /config/temporal-namespace-registered
              fi
        envFrom:
        - configMapRef:
            name: {{ include "release.fullname" . }}-common-configmap
        - secretRef:
            name: {{ include "release.fullname" . }}-common-secret
        - configMapRef:
            name: {{ include "release.fullname" . }}-backend-configmap
        - secretRef:
            name: {{ include "release.fullname" . }}-backend-secret
        image: "{{ .Values.temporal.admintools.image.repository }}:{{ .Values.temporal.admintools.image.tag }}"
        imagePullPolicy: {{ .Values.temporal.admintools.image.pullPolicy }}
        volumeMounts:
        - name: config
          mountPath: /config
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: {{ include "release.fullname" . }}-config
      imagePullSecrets:
      - name: {{ include "release.fullname" . }}-registry-secrets
